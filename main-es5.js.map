{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/alert-page/alert-page.component.html","webpack:///./src/app/app.component.html","webpack:///./src/app/event-page/event-page.component.html","webpack:///./src/app/home-page/home-page.component.html","webpack:///./src/app/page-not-found/page-not-found.component.html","webpack:///./src/app/park-page/park-page.component.html","webpack:///./src/app/search-page/search-page.component.html","webpack:///./src/app/DataViewComponent.ts","webpack:///./src/app/alert-page/alert-page.component.css","webpack:///./src/app/alert-page/alert-page.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/event-page/event-page.component.css","webpack:///./src/app/event-page/event-page.component.ts","webpack:///./src/app/home-page/home-page.component.css","webpack:///./src/app/home-page/home-page.component.ts","webpack:///./src/app/page-not-found/page-not-found.component.css","webpack:///./src/app/page-not-found/page-not-found.component.ts","webpack:///./src/app/park-page/park-page.component.css","webpack:///./src/app/park-page/park-page.component.ts","webpack:///./src/app/pipes/keep-html.pipe.ts","webpack:///./src/app/search-page/search-page.component.css","webpack:///./src/app/search-page/search-page.component.ts","webpack:///./src/app/services/npsapiclient.service.ts","webpack:///./src/app/services/npsmodel-daoprovider.service.ts","webpack:///./src/app/services/object-store.service.ts","webpack:///./src/app/services/window-ref.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///./src/nps/Constants.ts","webpack:///./src/nps/NPSAPIQuery.ts","webpack:///./src/nps/NPSAPIQueryBuilder.ts","webpack:///./src/nps/NPSAPIResponse.ts","webpack:///./src/nps/NPSAPIWorkerManager.ts","webpack:///./src/nps/NPSDataAccessStrategy.ts","webpack:///./src/nps/NPSDataSource.ts","webpack:///./src/nps/NPSModel.ts","webpack:///./src/nps/NPSModelDAO.ts","webpack:///./src/nps/NPSResourceDescription.ts"],"names":[],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<section role=\\\"main\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col\\\">\\n        <h2 class=\\\"mt-2\\\">Active Alerts at <ng-template [ngIf]=\\\"receivedObject\\\"><a [routerLink]=\\\"['/parks', parkCode]\\\">{{ receivedObject.getTitle() }}</a></ng-template></h2>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col\\\">\\n        <div class=\\\"container my-2\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col\\\">\\n              <div class=\\\"card-group\\\" *ngFor=\\\"let displayElement of alerts\\\">\\n                <div class=\\\"card alert-warning my-2 mx-1\\\">\\n                  <div class=\\\"card-header\\\"><h4>{{ displayElement.getTitle() }}</h4></div>\\n                  <div class=\\\"card-body\\\">\\n                    <p>\\n                      {{ displayElement.getDescription() }}\\n                    </p>\\n                    <ng-template [ngIf]=\\\"displayElement.getUrl() !== undefined && displayElement.getUrl() !== ''\\\">\\n                      <a [href]=\\\"displayElement.getUrl()\\\">Read more...</a>\\n                    </ng-template>\\n                  </div>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\"","module.exports = \"<!-- Navbar -->\\n<section role=\\\"banner\\\">\\n  <div class=\\\"navbar navbar-dark bg-dark shadow-sm\\\">\\n    <div class=\\\"container d-flex justify-content-between\\\">\\n      <a routerLink=\\\"/\\\" class=\\\"navbar-brand d-flex align-items-center\\\">\\n        <strong>Home</strong>\\n      </a>\\n      <a routerLink=\\\"/search/alerts\\\" class=\\\"navbar-brand d-flex align-items-center\\\">\\n        <strong>Search</strong>\\n      </a>\\n      <a routerLink=\\\"/\\\" class=\\\"navbar-brand d-flex align-items-center\\\">\\n        <strong>Learn</strong>\\n      </a>\\n    </div>\\n  </div>\\n</section>\\n<router-outlet></router-outlet>\\n\"","module.exports = \"<section role=\\\"main\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col\\\">\\n        <!-- header -->\\n        <h1>{{ receivedObject.getTitle() }}</h1>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col\\\">\\n        <div class=\\\"container\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-6\\\">\\n              <div class=\\\"card\\\">\\n                <h5 class=\\\"card-header\\\">\\n                  Event Info\\n                </h5>\\n                <div class=\\\"card-body\\\">\\n                  <div *ngFor=\\\"let displayElement of receivedObject.getDisplayElements()\\\">\\n                    <ng-template [ngIf]=\\\"displayElement.getDisplayElementType() == DISPLAY_PROPERTY\\\">\\n                      <div class=\\\"col\\\">\\n                        {{ displayElement.getTitle() }} {{ displayElement.getDescription() }}\\n                      </div>\\n                    </ng-template>\\n                  </div>\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n              <div class=\\\"container\\\">\\n                <div class=\\\"row\\\" *ngFor=\\\"let displayElement of receivedObject.getDisplayElements()\\\">\\n                  <ng-template [ngIf]=\\\"displayElement.getDisplayElementType() == DISPLAY_PARAGRAPH\\\">\\n                    <div class=\\\"col\\\">\\n                      <div class=\\\"card\\\">\\n                        <h5 class=\\\"card-header\\\" [innerHTML]=\\\"displayElement.getTitle() | keepHtml\\\"></h5>\\n                        <div class=\\\"card-body\\\" [innerHTML]=\\\"displayElement.getDescription() | keepHtml\\\"></div>\\n                      </div>\\n                    </div>\\n                  </ng-template>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col\\\">\\n        <ul class=\\\"list-group\\\" *ngFor=\\\"let displayElement of receivedObject.getDisplayElements()\\\">\\n          <li class=\\\"list-group-item card my-2 mx-1\\\"\\n              *ngIf=\\\"displayElement.getDisplayElementType() === DISPLAY_IMAGE\\\">\\n            <img [src]=\\\"displayElement.getUrl()\\\"\\n                 [alt]=\\\"displayElement.getDescription()\\\" style=\\\"width:50%;\\\"\\n                 class=\\\"float-right\\\">\\n            <div>\\n              <p class=\\\"font-weight-bold mt-1 mb-0\\\">{{ displayElement.getTitle() }}</p>\\n              <p class=\\\"my-1\\\" [innerHTML]=\\\"displayElement.getDescription() | keepHtml\\\"></p>\\n            </div>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\"","module.exports = \"<section role=\\\"main\\\">\\n  <div class=\\\"container-fluid px-0\\\">\\n    <img src=\\\"assets/img/park1.jpg\\\" width=\\\"100%\\\" />\\n  </div>\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <h1>\\n        Welcome to {{ title }}!\\n      </h1>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <button class=\\\"btn btn-primary col-2\\\" (click)=\\\"callAPI()\\\">Call API</button>\\n      <input class=\\\"col-10\\\" [(ngModel)]=\\\"queryString\\\" type=\\\"text\\\"/>\\n    </div>\\n    <div class=\\\"row my-2\\\">\\n      <div class=\\\"col container\\\">\\n        <ul class=\\\"list-group\\\" *ngFor=\\\"let datum of data\\\">\\n          <li class=\\\"list-group-item\\\">\\n            <div (click)=\\\"goToLearnPage(datum)\\\">\\n              <p class=\\\"my-0\\\"><b>{{ datum.getTitle() }}</b></p>\\n              <p class=\\\"my-0\\\">{{ datum.getDescription() }}</p>\\n            </div>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\"","module.exports = \"<section role=\\\"main\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col text-center\\\">\\n        <div class=\\\"alert alert-danger\\\">\\n          <h2>Uh-oh! Looks like the page you were looking for doesn't exist. Go back <a [routerLink]=\\\"['/']\\\">home</a>.</h2>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\"","module.exports = \"<section role=\\\"main\\\">\\n  <ng-template [ngIf]=\\\"park !== undefined\\\">\\n    <div class=\\\"container my-2\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col text-center\\\">\\n          <h1>{{ park.getTitle() }}</h1>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <ng-template [ngIf]=\\\"parkAlerts.length > 0 || parkEvents.length > 0\\\">\\n          <div class=\\\"col-lg-4 col-sm-12\\\">\\n            <ng-template [ngIf]=\\\"parkAlerts.length > 0\\\">\\n              <div class=\\\"container my-2\\\">\\n                <div class=\\\"row\\\">\\n                  <div class=\\\"col\\\">\\n                    <h3><a [routerLink]=\\\"['/alerts', parkCode]\\\">Active Alerts</a></h3>\\n                  </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                  <div class=\\\"col\\\">\\n                    <div class=\\\"card-group\\\" *ngFor=\\\"let displayElement of parkAlerts\\\">\\n                      <div class=\\\"card alert-warning my-2 mx-1\\\" [routerLink]=\\\"['/alerts', parkCode]\\\">\\n                        <div class=\\\"card-header\\\"><h4>{{ displayElement.getTitle() }}</h4></div>\\n                        <div class=\\\"card-body\\\">\\n                          <p>\\n                            {{ displayElement.getDescription() }}\\n                          </p>\\n                          <ng-template [ngIf]=\\\"displayElement.getUrl() !== undefined && displayElement.getUrl() !== ''\\\">\\n                            <a [href]=\\\"displayElement.getUrl()\\\">Read more...</a>\\n                          </ng-template>\\n                        </div>\\n                      </div>\\n                    </div>\\n                  </div>\\n                </div>\\n              </div>\\n            </ng-template>\\n            <ng-template [ngIf]=\\\"parkEvents.length > 0\\\">\\n              <div class=\\\"container my-2\\\">\\n                <div class=\\\"row\\\">\\n                  <div class=\\\"col\\\">\\n                    <h3>Events</h3>\\n                  </div>\\n                </div>\\n              </div>\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col\\\">\\n                  <div class=\\\"card-group\\\" *ngFor=\\\"let displayElement of parkEvents\\\">\\n                    <div class=\\\"card my-2 mx-1\\\" (click)=\\\"store(park);store(displayElement)\\\" [routerLink]=\\\"['/event']\\\">\\n                      <div class=\\\"card-header\\\"><h4>{{ displayElement.getTitle() }}</h4></div>\\n                      <div class=\\\"card-body\\\">\\n                        <p [innerHTML]=\\\"displayElement.getDescription() | keepHtml\\\"></p>\\n                        <ng-template [ngIf]=\\\"displayElement.getUrl() !== undefined && displayElement.getUrl() !== ''\\\">\\n                          <a [href]=\\\"displayElement.getUrl()\\\">Read more...</a>\\n                        </ng-template>\\n                      </div>\\n                    </div>\\n                  </div>\\n                </div>\\n              </div>\\n            </ng-template>\\n          </div>\\n        </ng-template>\\n        <div class=\\\"col\\\">\\n          <div class=\\\"container\\\">\\n            <div class=\\\"card-group\\\" *ngFor=\\\"let displayElement of park.getDisplayElements()\\\">\\n              <div class=\\\"card my-2 mx-1\\\"\\n                  *ngIf=\\\"displayElement.getDisplayElementType() === DISPLAY_SUMMARY\\\">\\n                <div class=\\\"card-header\\\"><h2>{{ displayElement.getTitle() }}</h2></div>\\n                <div class=\\\"card-body\\\">\\n                  <p [innerHTML]=\\\"displayElement.getDescription() | keepHtml\\\"></p>\\n                  <ng-template [ngIf]=\\\"displayElement.getUrl() !== undefined && displayElement.getUrl() !== ''\\\">\\n                    <a [href]=\\\"displayElement.getUrl()\\\">Read more...</a>\\n                  </ng-template>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"container my-2\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col\\\">\\n                <h1>Gallery</h1>\\n              </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col\\\">\\n                <ul class=\\\"list-group\\\" *ngFor=\\\"let displayElement of park.getDisplayElements()\\\">\\n                  <li class=\\\"list-group-item card my-2 mx-1\\\"\\n                      *ngIf=\\\"displayElement.getDisplayElementType() === DISPLAY_IMAGE\\\">\\n                    <img [src]=\\\"displayElement.getUrl()\\\"\\n                         [alt]=\\\"displayElement.getDescription()\\\" style=\\\"width:50%;\\\"\\n                         class=\\\"float-right\\\">\\n                    <div>\\n                      <p class=\\\"font-weight-bold mt-1 mb-0\\\">{{ displayElement.getTitle() }}</p>\\n                      <p class=\\\"my-1\\\" [innerHTML]=\\\"displayElement.getDescription() | keepHtml\\\"></p>\\n                    </div>\\n                  </li>\\n                </ul>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </ng-template>\\n</section>\\n\"","module.exports = \"<section role=\\\"main\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col mt-2\\\">\\n        <h1>Search the NPS Database</h1>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col\\\"></div>\\n      <div class=\\\"col-lg-6\\\" id=\\\"nps-search-bar\\\">\\n        <!-- Search form -->\\n        <select name=\\\"resource\\\" class=\\\"custom-select form-control my-2\\\" [(ngModel)]=\\\"resource\\\">\\n          <option value=\\\"alerts\\\">Alerts</option>\\n          <option value=\\\"parks\\\">Parks</option>\\n        </select>\\n\\n        <div class=\\\"input-group md-form form-sm my-2\\\">\\n          <input name=\\\"query\\\" class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"query\\\" (keyup.enter)=\\\"onSubmit()\\\" placeholder=\\\"Search\\\" aria-label=\\\"Search\\\">\\n          <div class=\\\"input-group-append\\\" [routerLink]=\\\"query ? ['/search', resource, query] : ['/search', resource]\\\">\\n            <button class=\\\"btn btn-outline-primary input-group-text\\\">\\n              Search <span class=\\\"pl-2\\\"><i class=\\\"fas fa-search\\\"></i></span>\\n            </button>\\n          </div>\\n        </div>\\n\\n        <!-- Each resource defines its own filters -->\\n        <ng-template [ngIf]=\\\"resource == 'parks'\\\">\\n          <div><h4>State Filters</h4></div>\\n          <select name=\\\"stateFilters\\\"\\n                  class=\\\"custom-select form-control my-2\\\"\\n                  (change)=\\\"addStateFilter(selectedState)\\\"\\n                  [(ngModel)]=\\\"selectedState\\\">\\n            <option *ngFor=\\\"let state of stateCodes\\\" value=\\\"{{ state }}\\\">{{ state }}</option>\\n          </select>\\n\\n          <div class=\\\"container-fluid\\\">\\n            <button *ngFor=\\\"let filter of stateFilters\\\" class=\\\"btn btn-outline-secondary mx-2 my-1\\\"\\n                (click)=\\\"removeStateFilter(filter)\\\">\\n              <span class=\\\"pr-2\\\"><i class=\\\"fas fa-times\\\"></i></span>{{filter}}\\n            </button>\\n          </div>\\n        </ng-template>\\n      </div>\\n      <div class=\\\"col\\\"></div>\\n    </div>\\n    <div class=\\\"row pt-1\\\">\\n      <div class=\\\"col\\\">\\n        <ng-template [ngIf]=\\\"noResults == true\\\">\\n          <div class=\\\"d-flex justify-content-center w-100\\\">\\n            <p class=\\\"alert alert-danger flex-shrink-1\\\" role=\\\"alert\\\">No results were found for the given search terms.</p>\\n          </div>\\n        </ng-template>\\n        <ng-template [ngIf]=\\\"waiting == true\\\">\\n          <div class=\\\"text-center w-100\\\">\\n            <div class=\\\"spinner-border\\\" role=\\\"status\\\">\\n              <span class=\\\"sr-only\\\">Loading...</span>\\n            </div>\\n          </div>\\n        </ng-template>\\n        <ng-template [ngIf]=\\\"noResults == false && waiting == false\\\">\\n          <div class=\\\"card-group\\\" *ngFor=\\\"let datum of data\\\">\\n            <div class=\\\"card my-1\\\" [routerLink]=\\\"datumRouterLink(datum)\\\">\\n              <div class=\\\"card-header\\\">\\n                <h4 class=\\\"my-0\\\">{{ datum.getTitle() }}</h4>\\n              </div>\\n              <div class=\\\"card-body\\\">\\n                <p>\\n                  {{ datum.getDescription() }}\\n                </p>\\n              </div>\\n            </div>\\n          </div>\\n        </ng-template>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\"","import {OnDestroy, OnInit} from \"@angular/core\";\nimport {ActivatedRoute, ParamMap, Router} from \"@angular/router\";\nimport {NPSAPIClientService} from \"./services/npsapiclient.service\";\nimport {Observable, Subscription} from \"rxjs\";\nimport {ObjectStoreService} from \"./services/object-store.service\";\nimport {INPSObject} from \"../nps/NPSModel\";\n\n/**\n *\n */\nexport interface IDataViewComponent extends OnInit, OnDestroy {\n  fetchData(): void;\n  onParamMapChange(newParamMap: ParamMap);\n\n  store(obj: INPSObject);\n}\n\n\n// TODO: Abstract more boolean flags and control flow into this class\n//  (such as the `waiting` flag for when a request is being processed)\nexport abstract class ADataViewComponent implements IDataViewComponent {\n  protected paramMap$: Observable<ParamMap>;\n  protected paramMapSubscription: Subscription;\n  protected receivedObject: INPSObject;\n\n  protected constructor(\n    protected route: ActivatedRoute,\n    protected router: Router,\n    protected apiClient: NPSAPIClientService,\n    protected storeService: ObjectStoreService\n  ) {}\n\n  abstract fetchData(): void;\n\n  ngOnInit(): void {\n    this.receivedObject = this.storeService.pop(); // Will be set to undefined if none exists, which is intended\n\n    this.paramMap$ = this.route.paramMap;\n    this.paramMapSubscription = this.paramMap$.subscribe(\n      x => this.onParamMapChange(x),\n      err => console.error(\"error in paramMap observable\"),\n      () => console.log(\"paramMap observable completed\")\n    );\n    this.fetchData();\n  }\n\n  ngOnDestroy(): void {\n    this.paramMapSubscription.unsubscribe();\n  }\n\n  abstract onParamMapChange(newParamMap: ParamMap);\n\n  store(obj: INPSObject) {\n    this.storeService.push(obj);\n  }\n}\n\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FsZXJ0LXBhZ2UvYWxlcnQtcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {ActivatedRoute, ParamMap, Router} from \"@angular/router\";\nimport {Observable, Subscription} from \"rxjs\";\nimport NPSAPIQueryBuilder from \"../../nps/NPSAPIQueryBuilder\";\nimport {NPSDataAccessStrategyBuilder} from \"../../nps/NPSDataAccessStrategy\";\nimport {INPSObject} from \"../../nps/NPSModel\";\nimport {NPSAPIClientService} from \"../services/npsapiclient.service\";\nimport {ObjectStoreService} from \"../services/object-store.service\";\nimport {ADataViewComponent} from \"../DataViewComponent\";\n\n@Component({\n  selector: 'app-alert-page',\n  templateUrl: './alert-page.component.html',\n  styleUrls: ['./alert-page.component.css']\n})\nexport class AlertPageComponent extends ADataViewComponent {\n  private parkCode: string;\n  private alerts: Array<INPSObject>;\n\n  private noResults: boolean;\n\n  constructor(\n    protected route: ActivatedRoute,\n    protected router: Router,\n    protected apiClient: NPSAPIClientService,\n    protected storeService: ObjectStoreService\n  ) {\n    super(route, router, apiClient, storeService);\n    this.alerts = [];\n  }\n\n  ngOnInit() {\n    this.parkCode = this.route.snapshot.paramMap.get('parkCode');\n\n    if (!this.receivedObject) {\n      let queryBuilder = new NPSAPIQueryBuilder()\n        .addParkCode(this.parkCode)\n        .longText(false)\n        .setLimit(5)\n        .from('parks');\n\n      let strategy = new NPSDataAccessStrategyBuilder()\n        .use('batch', {\n          queryBuilder: queryBuilder\n        })\n        .build();\n\n      let parkSource = this.apiClient.retrieve(queryBuilder.build(), strategy);\n      parkSource.addOnUpdateHandler((snapshot: Array<INPSObject>) => {\n        if (snapshot.length < 1) {\n          this.router.navigateByUrl('/page-not-found');\n          return;\n        }\n\n        this.receivedObject = snapshot[0];\n      });\n    } else {\n      this.store(this.receivedObject);\n    }\n\n    super.ngOnInit();\n  }\n\n  onParamMapChange(newParamMap: ParamMap) {\n    let parkCode = newParamMap.get('parkCode');\n    if (parkCode != this.parkCode) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    let queryBuilder = new NPSAPIQueryBuilder()\n      .from('alerts')\n      .longText(false);\n\n    if (this.parkCode !== undefined) {\n      queryBuilder.addParkCode(this.parkCode);\n    }\n\n    let strategy = new NPSDataAccessStrategyBuilder()\n      .use('default')\n      .build();\n\n    let alertsSource = this.apiClient.retrieve(queryBuilder.build(), strategy);\n    alertsSource.addOnUpdateHandler((snapshot: Array<INPSObject>) => {\n      this.alerts = snapshot;\n    });\n    alertsSource.addOnCompletedHandler((snapshot: Array<INPSObject>) => {\n      if (snapshot.length == 0) {\n        this.noResults = true;\n      }\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ParkPageComponent} from \"./park-page/park-page.component\";\nimport {HomePageComponent} from \"./home-page/home-page.component\";\nimport {PageNotFoundComponent} from \"./page-not-found/page-not-found.component\";\nimport {SearchPageComponent} from \"./search-page/search-page.component\";\nimport {AlertPageComponent} from \"./alert-page/alert-page.component\";\nimport {EventPageComponent} from \"./event-page/event-page.component\";\n\nconst routes: Routes = [\n  { path: 'parks/:parkCode', component: ParkPageComponent, pathMatch: 'full' },\n  { path: 'event', component: EventPageComponent, pathMatch: 'full' },\n  { path: 'alerts', component: AlertPageComponent },\n  { path: 'alerts/:parkCode', component: AlertPageComponent },\n  { path: 'search', component: SearchPageComponent },\n  { path: 'search/:resource', component: SearchPageComponent },\n  { path: 'search/:resource/:query', component: SearchPageComponent },\n  { path: '', component: HomePageComponent },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forRoot(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport {WindowRefService} from \"./services/window-ref.service\";\nimport {NPSModelDAOProviderService} from \"./services/npsmodel-daoprovider.service\";\nimport {FormsModule} from \"@angular/forms\";\nimport { ParkPageComponent } from './park-page/park-page.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HomePageComponent } from './home-page/home-page.component';\nimport { AppComponent } from './app.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { SearchPageComponent } from './search-page/search-page.component';\nimport { AlertPageComponent } from './alert-page/alert-page.component';\nimport {ObjectStoreService} from \"./services/object-store.service\";\nimport {CommonModule} from \"@angular/common\";\nimport {EscapeHtmlPipe} from \"./pipes/keep-html.pipe\";\nimport { EventPageComponent } from './event-page/event-page.component';\n\n\n@NgModule({\n  declarations: [\n    ParkPageComponent,\n    HomePageComponent,\n    AppComponent,\n    PageNotFoundComponent,\n    SearchPageComponent,\n    AlertPageComponent,\n    EscapeHtmlPipe,\n    EventPageComponent\n  ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    FormsModule,\n    AppRoutingModule\n  ],\n  providers: [ WindowRefService, NPSModelDAOProviderService, ObjectStoreService ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2V2ZW50LXBhZ2UvZXZlbnQtcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport {ADataViewComponent} from \"../DataViewComponent\";\nimport {ActivatedRoute, ParamMap, Router} from \"@angular/router\";\nimport {NPSAPIClientService} from \"../services/npsapiclient.service\";\nimport NPSAPIQueryBuilder from \"../../nps/NPSAPIQueryBuilder\";\nimport {NPSDataAccessStrategyBuilder} from \"../../nps/NPSDataAccessStrategy\";\nimport {INPSObject, NPSDisplayElementType} from \"../../nps/NPSModel\";\nimport {ObjectStoreService} from \"../services/object-store.service\";\n\n@Component({\n  selector: 'app-event-page',\n  templateUrl: './event-page.component.html',\n  styleUrls: ['./event-page.component.css']\n})\nexport class EventPageComponent extends ADataViewComponent {\n  private parkCode: string;\n\n  private readonly DISPLAY_PROPERTY = NPSDisplayElementType.PROPERTY;\n  private readonly DISPLAY_PARAGRAPH = NPSDisplayElementType.SUMMARY;\n  private readonly DISPLAY_IMAGE = NPSDisplayElementType.IMAGE;\n\n  constructor(\n    protected route: ActivatedRoute,\n    protected router: Router,\n    protected apiClient: NPSAPIClientService,\n    protected storeService: ObjectStoreService\n  ) {\n    super(route, router, apiClient, storeService);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    if (this.receivedObject === undefined) {\n      this.router.navigateByUrl('/page-not-found');\n    }\n  }\n\n  fetchData(): void {\n\n  }\n\n  onParamMapChange(newParamMap: ParamMap) {\n    let parkCode = newParamMap.get('parkCode');\n    if (parkCode !== this.parkCode) {\n      this.parkCode = parkCode;\n      this.fetchData();\n    }\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hvbWUtcGFnZS9ob21lLXBhZ2UuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport {INPSObject} from \"../../nps/NPSModel\";\nimport {NPSAPIClientService} from \"../services/npsapiclient.service\";\nimport {Router} from \"@angular/router\";\nimport NPSAPIQueryBuilder from \"../../nps/NPSAPIQueryBuilder\";\nimport {NPSDataAccessStrategyBuilder} from \"../../nps/NPSDataAccessStrategy\";\nimport NPSDataSource from \"../../nps/NPSDataSource\";\n\n@Component({\n  selector: 'app-home-page',\n  templateUrl: './home-page.component.html',\n  styleUrls: ['./home-page.component.css']\n})\nexport class HomePageComponent implements OnInit {\n  title: string = 'nps-kiosk-app';\n  resource: string = \"parks\";\n  queryString: string = \"\";\n  data: Array<INPSObject> = [];\n\n  constructor(private npsapiClientService : NPSAPIClientService, private router: Router) {}\n\n  ngOnInit() {\n\n  }\n\n  callAPI() {\n    let qb = new NPSAPIQueryBuilder();\n    qb.from(this.resource);\n\n    if (this.queryString !== \"\") {\n      qb.setQueryString(this.queryString);\n    }\n\n    let strategy = (new NPSDataAccessStrategyBuilder())\n      .use('default')\n      .use('filter', {\n        predicate: datum => {\n          return datum.getUrl() !== \"\";\n        }\n      })\n      .build();\n\n    let dataSource: NPSDataSource = this.npsapiClientService.retrieve(qb.build(), strategy);\n    dataSource.addOnUpdateHandler(snapshot => this.data = snapshot);\n  }\n\n  goToLearnPage(datum) {\n    this.router.navigateByUrl(\"\");\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2Utbm90LWZvdW5kL3BhZ2Utbm90LWZvdW5kLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.css']\n})\nexport class PageNotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhcmstcGFnZS9wYXJrLXBhZ2UuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {ActivatedRoute, ParamMap, Router} from \"@angular/router\";\nimport {Observable, Subscription} from \"rxjs\";\nimport NPSAPIQueryBuilder from \"../../nps/NPSAPIQueryBuilder\";\nimport {NPSAPIClientService} from \"../services/npsapiclient.service\";\nimport {NPSDataAccessStrategyBuilder} from \"../../nps/NPSDataAccessStrategy\";\nimport NPSDataSource from \"../../nps/NPSDataSource\";\nimport {INPSObject, NPSDisplayElementType} from \"../../nps/NPSModel\";\nimport {ObjectStoreService} from \"../services/object-store.service\";\nimport {ADataViewComponent} from \"../DataViewComponent\";\n\n@Component({\n  selector: 'app-park-page',\n  templateUrl: './park-page.component.html',\n  styleUrls: ['./park-page.component.css']\n})\nexport class ParkPageComponent extends ADataViewComponent {\n  private parkCode: string;\n  private park: INPSObject;\n\n  // Sub-information about the park\n  private parkAlerts: Array<INPSObject>;\n  private parkEvents: Array<INPSObject>;\n\n  // NPS Display Element Type bindings for use in the view\n  private readonly DISPLAY_IMAGE = NPSDisplayElementType.IMAGE;\n  private readonly DISPLAY_SUMMARY = NPSDisplayElementType.SUMMARY;\n  private readonly DISPLAY_META = NPSDisplayElementType.META;\n\n  constructor(\n    protected route: ActivatedRoute,\n    protected router: Router,\n    protected apiClient: NPSAPIClientService,\n    protected storeService: ObjectStoreService\n  ) {\n    super(route, router, apiClient, storeService);\n    this.park = undefined;\n    this.parkAlerts = [];\n    this.parkEvents = [];\n  }\n\n  onParamMapChange(newMap: ParamMap) {\n    let parkCode = newMap.get('parkCode');\n    if (parkCode != this.parkCode) {\n      this.parkCode = parkCode;\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    let queryBuilder = new NPSAPIQueryBuilder();\n    let strategy = new NPSDataAccessStrategyBuilder()\n      .use('default')\n      .build();\n\n    if (!this.receivedObject) {\n      let query = queryBuilder\n        .from('parks')\n        .includeField('images')\n        .addParkCode(this.parkCode)\n        .longText(true)\n        .build();\n\n      let parkSource: NPSDataSource = this.apiClient.retrieve(query, strategy);\n      parkSource.addOnUpdateHandler((snapshot: Array<INPSObject>) => {\n        if (snapshot.length < 1) {\n          //this.router.navigateByUrl('/page-not-found');\n        }\n\n        this.park = snapshot[0];\n        this.store(this.park);\n      });\n\n    } else {\n      this.park = this.receivedObject;\n    }\n\n    let query = queryBuilder\n      .reset()\n      .from('alerts')\n      .addParkCode(this.parkCode)\n      .longText(false)\n      .setLimit(5)\n      .build();\n\n    let alertsSource: NPSDataSource = this.apiClient.retrieve(query, strategy);\n    alertsSource.addOnUpdateHandler((snapshot: Array<INPSObject>) => {\n      this.parkAlerts = snapshot;\n    });\n\n    query = queryBuilder\n      .reset()\n      .from('events')\n      .addParkCode(this.parkCode)\n      .longText(true)\n      .set('pagesize', 5)\n      .includeField('images')\n      .build();\n\n    console.log(query);\n\n    let eventsSource: NPSDataSource = this.apiClient.retrieve(query, strategy);\n    eventsSource.addOnUpdateHandler((snapshot: Array<INPSObject>) => {\n      console.log(snapshot);\n      this.parkEvents = snapshot;\n    });\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Pipe({ name: 'keepHtml', pure: false })\nexport class EscapeHtmlPipe implements PipeTransform {\n  constructor(private sanitizer: DomSanitizer) {\n  }\n\n  transform(content) {\n    return this.sanitizer.bypassSecurityTrustHtml(content);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NlYXJjaC1wYWdlL3NlYXJjaC1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {ActivatedRoute, ParamMap, Router} from \"@angular/router\";\nimport {NPSAPIClientService} from \"../services/npsapiclient.service\";\nimport NPSAPIQueryBuilder from \"../../nps/NPSAPIQueryBuilder\";\nimport {NPSDataAccessStrategyBuilder} from \"../../nps/NPSDataAccessStrategy\";\nimport NPSDataSource from \"../../nps/NPSDataSource\";\nimport {INPSObject} from \"../../nps/NPSModel\";\nimport {ObjectStoreService} from \"../services/object-store.service\";\nimport {STATE_CODES} from \"../../nps/Constants\";\nimport {ADataViewComponent} from \"../DataViewComponent\";\n\n@Component({\n  selector: 'app-search-page',\n  templateUrl: './search-page.component.html',\n  styleUrls: ['./search-page.component.css']\n})\nexport class SearchPageComponent extends ADataViewComponent {\n  private resource: string;\n  private query: string;\n\n  private data: Array<INPSObject>;\n  private waiting: boolean;\n  private noResults: boolean;\n  private datumRouterLink: any;\n  private datumRouterLinkGenerator =\n    (resource: string) => {\n      return (datum: INPSObject) => {\n        return ['/', resource, datum.getUniqueId()];\n      }\n    };\n\n  // Variables for state filter\n  private readonly stateCodes = STATE_CODES;\n  private selectedState: string;\n  private stateFilters: Array<string>;\n\n  constructor(\n    protected route: ActivatedRoute,\n    protected router: Router,\n    protected apiClient: NPSAPIClientService,\n    protected storeService: ObjectStoreService\n  ) {\n    super(route, router, apiClient, storeService);\n    // Defaults\n    this.resource = 'alerts';\n    this.query = undefined;\n    this.waiting = false;\n    this.noResults = false;\n    this.stateFilters = [];\n  }\n\n  onParamMapChange(newMap: ParamMap) {\n    let query = newMap.get('query');\n    let resource = newMap.get('resource');\n\n    console.log(\"PARAMS UPDATED\", query, resource);\n\n    if (!this.waiting) {\n      this.query = query;\n      this.resource = resource;\n      this.fetchData();\n    }\n  }\n\n  onSubmit() {\n    this.router.navigate([\n      '/search',\n      this.resource,\n      this.query\n    ]);\n    /*\n    if (!this.waiting) {\n      this.fetchData();\n    }*/\n  }\n\n  fetchData() {\n    this.waiting = true;\n    this.noResults = false;\n    this.data = [];\n\n    this.datumRouterLink = this.datumRouterLinkGenerator(this.resource);\n    this.storeService.pop();\n\n    let queryBuilder = new NPSAPIQueryBuilder()\n      .from(this.resource)\n      .setQueryString(this.query)\n      .longText(false)\n      .addAllStateCodes(this.stateFilters);\n\n    let strategyBuilder = new NPSDataAccessStrategyBuilder()\n      .use('batch', {\n        'queryBuilder': queryBuilder\n      });\n\n    let dataSource: NPSDataSource = this.apiClient.retrieve(queryBuilder.build(), strategyBuilder.build());\n    dataSource.addOnUpdateHandler((snapshot: Array<INPSObject>) => {\n      if (snapshot.length > 0) {\n        this.waiting = false;\n      }\n      this.data = snapshot;\n    });\n    dataSource.addOnCompletedHandler((snapshot: Array<INPSObject>) => {\n      this.noResults = snapshot.length == 0;\n      this.waiting = false;\n    });\n  }\n\n  addStateFilter(stateCode: string) {\n    this.stateFilters.push(stateCode);\n    this.fetchData();\n    console.log(\"Attempt to add state\", stateCode);\n  }\n\n  removeStateFilter(stateCode: string) {\n    this.stateFilters = this.stateFilters.reduce((acc, val) => {\n      if (val !== stateCode) {\n        acc.push(val);\n      }\n      return acc;\n    }, []);\n    this.fetchData();\n    console.log(\"Attempt to remove state\", stateCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport INPSAPIWorkerManager, { NPSAPIWorkerManager } from '../../nps/NPSAPIWorkerManager';\nimport INPSAPIQuery from '../../nps/NPSAPIQuery';\nimport { INPSModelDAO } from '../../nps/NPSModelDAO';\nimport { WindowRefService } from \"./window-ref.service\";\nimport { NPSModelDAOProviderService } from \"./npsmodel-daoprovider.service\";\nimport {INPSDataAccessStrategy} from \"../../nps/NPSDataAccessStrategy\";\nimport NPSDataSource from \"../../nps/NPSDataSource\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NPSAPIClientService {\n  private readonly workerMgr : INPSAPIWorkerManager;\n  private readonly dao : INPSModelDAO;\n\n  constructor(private windowRef : WindowRefService, private daoProvider : NPSModelDAOProviderService) {\n    if (windowRef.nativeWindow) {\n      this.workerMgr = new NPSAPIWorkerManager(\n        'assets/js/worker.js', // This is a singleton instance, so no duplicate workers are created\n        windowRef.nativeWindow);\n    }\n    this.dao = daoProvider.getDAOBuilder()(this.workerMgr);\n  }\n\n  retrieve(query: INPSAPIQuery, strategy: INPSDataAccessStrategy): NPSDataSource {\n    return strategy.getData(query, this.dao);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NPSModelDAO } from \"../../nps/NPSModelDAO\";\nimport INPSAPIWorkerManager from \"../../nps/NPSAPIWorkerManager\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NPSModelDAOProviderService {\n\n  constructor() { }\n\n  getDAOBuilder() {\n    return (workerMgr: INPSAPIWorkerManager) => new NPSModelDAO(workerMgr);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {INPSObject, NPSObjectBuilder} from \"../../nps/NPSModel\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ObjectStoreService {\n  private stack: Array<INPSObject>;\n\n  constructor() {\n    this.stack = [];\n  }\n\n  isEmpty(): boolean {\n    return this.stack.length == 0;\n  }\n\n  clear() {\n    this.stack = [];\n  }\n\n  push(obj: INPSObject) {\n    this.stack.push(obj);\n  }\n\n  pop(): INPSObject {\n    return this.stack.pop();\n  }\n}\n","import { Injectable } from '@angular/core';\n\nfunction _window() : any {\n  // return the global native browser window object\n  return window;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WindowRefService {\n  get nativeWindow() : any {\n    return _window();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","\n\nexport const STATE_CODES = [\n  'AL',\n  'AK',\n  'AZ',\n  'AR',\n  'CA',\n  'CO',\n  'CT',\n  'DE',\n  'DC',\n  'FL',\n  'GA',\n  'HI',\n  'ID',\n  'IL',\n  'IN',\n  'IA',\n  'KS',\n  'KY',\n  'LA',\n  'ME',\n  'MT',\n  'NE',\n  'NV',\n  'NH',\n  'NJ',\n  'NM',\n  'NY',\n  'NC',\n  'ND',\n  'OH',\n  'OK',\n  'OR',\n  'MD',\n  'MA',\n  'MI',\n  'MN',\n  'MS',\n  'MO',\n  'PA',\n  'RI',\n  'SC',\n  'SD',\n  'TN',\n  'TX',\n  'UT',\n  'VT',\n  'VA',\n  'WA',\n  'WV',\n  'WI',\n  'WY'];\n","import INPSAPIWorkerManager from './NPSAPIWorkerManager';\nimport INPSAPIResponse from './NPSAPIResponse';\n\nexport default interface INPSAPIQuery {\n  execute(workerMgr : INPSAPIWorkerManager, paramsOverride: object) : Promise<INPSAPIResponse>;\n  getConfig(): NPSAPIQueryOptions\n}\n\n/**\n * Represents an NPS API query that can be executed.\n */\nexport class NPSAPIQuery implements INPSAPIQuery {\n  private readonly resource : string;\n  private readonly params: object;\n  private readonly options: NPSAPIQueryOptions;\n\n  /**\n   * @param resource The API resource to query\n   * @param params The query parameters\n   * @constructor\n   */\n  constructor(resource: string, params: object, options: NPSAPIQueryOptions) {\n    this.resource = resource;\n    this.params = params;\n    this.options = options;\n  }\n\n  /**\n   * Strips down this query object into a simple object with just resource and params fields.\n   * @return {{resource: *, params: *}}\n   */\n  strip() {\n    return {\n      resource: this.resource,\n      params: this.params\n    };\n  }\n\n  /**\n   * Executes this query by sending a request to the given API worker manager.\n   * @param {NPSAPIWorkerManager} workerMgr The worker manager\n   * @return {Promise<NPSAPIResponse>} The response object\n   */\n  async execute(workerMgr: INPSAPIWorkerManager, paramsOverride: object = {}) : Promise<INPSAPIResponse> {\n    for (let field in paramsOverride) {\n      this.params[field] = paramsOverride[field]; // Set override parameters\n    }\n\n    let response = await (new Promise((resolve) => {\n      workerMgr.request(this, response => resolve(response));\n    }));\n\n    // @ts-ignore\n    return response;\n  }\n\n  getConfig() {\n    return this.options;\n  }\n}\n\nexport class NPSAPIQueryOptions {\n  private long: boolean = false;\n\n  constructor() {}\n\n  setLong(long: boolean): NPSAPIQueryOptions {\n    this.long = long;\n    return this;\n  }\n\n  getLong(): boolean {\n    return this.long;\n  }\n}\n","import {NPSAPIQuery, NPSAPIQueryOptions} from \"./NPSAPIQuery\";\n\n/**\n * Factory for {@link NPSAPIQuery} objects that can be executed on the NPS API.\n */\nexport default class NPSAPIQueryBuilder {\n  private parkCodes : Array<string>;\n  private stateCodes : Array<string>;\n  private queryString : string;\n  private limit : number;\n  private start : number;\n  private resource : string;\n  private options : NPSAPIQueryOptions;\n  private fields : Array<string>;\n  private params: object;\n\n  constructor() {\n    this.reset();\n  }\n\n  /**\n   * Resets this query builder to its initial state.\n   * @return {NPSAPIQueryBuilder} This instance, with its fields reset\n   */\n  reset() {\n    this.parkCodes = [];\n    this.stateCodes = [];\n    this.queryString = undefined;\n    this.limit = 50;\n    this.start = 0;\n    this.options = new NPSAPIQueryOptions();\n    this.fields = [];\n    this.params = {};\n    return this;\n  }\n\n  longText(long: boolean) {\n    this.options.setLong(long);\n    return this;\n  }\n\n  /**\n   * Adds all park codes in the given array to the query.\n   * @param {Array<String>} parkCodeArr The array of park codes to add\n   * @return {NPSAPIQueryBuilder} This instance\n   */\n  addAllParkCodes(parkCodeArr) {\n    parkCodeArr.forEach((parkCode) => {\n      if (!this.parkCodes.includes(parkCode)) {\n        this.parkCodes.push(parkCode);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Adds a single park code to the query.\n   * @param {String} parkCode The park code\n   * @return {NPSAPIQueryBuilder} This instance\n   */\n  addParkCode(parkCode) {\n    if (!this.parkCodes.includes(parkCode)) {\n      this.parkCodes.push(parkCode);\n    }\n    return this;\n  }\n\n  addAllStateCodes(stateCodeArr) {\n    stateCodeArr.forEach((parkCode) => {\n      if (!this.stateCodes.includes(parkCode)) {\n        this.stateCodes.push(parkCode);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Sets the query string.\n   * @param {String} queryString The query string\n   * @return {NPSAPIQueryBuilder} This instance\n   */\n  setQueryString(queryString) {\n    this.queryString = queryString;\n    return this;\n  }\n\n  /**\n   * Advances the query by one page. Makes it extremely easy to chain queries to obtain multiple pages.\n   * @example\n   * let qb = new NPSAPIQueryBuilder();\n   * let response1 = qb.from(\"parks\").build().execute();\n   * let response2 = qb.nextPage().build().execute();\n   *\n   * @return {NPSAPIQueryBuilder} This instance\n   */\n  nextPage() {\n    this.start += this.limit;\n    return this;\n  }\n\n  /**\n   * Sets the limit.\n   * @param {int} limit The limit\n   * @return {NPSAPIQueryBuilder} This instance\n   * @throws {Error} if the limit is less than 0\n   */\n  setLimit(limit) {\n    if (limit < 0) {\n      throw new Error(\"Limit cannot be less than 0\");\n    }\n\n    this.limit = limit;\n    return this;\n  }\n\n  /**\n   * Sets the start index.\n   * @param {int} start The start index\n   * @return {NPSAPIQueryBuilder} This instance\n   * @throws {Error} if the start index is less than 0\n   */\n  setStart(start) {\n    if (start < 0) {\n      throw new Error(\"Start cannot be less than 0\");\n    }\n    this.start = start;\n    return this;\n  }\n\n  /**\n   * Sets the resource from which to retrieve data.\n   * @param {String} resource The resource string\n   * @return {NPSAPIQueryBuilder} This instance\n   */\n  from(resource) {\n    this.resource = resource;\n    return this;\n  }\n\n  set(name, value) {\n    this.params[name] = value;\n    return this;\n  }\n\n  /**\n   * Builds a new query object based on the current configuration.\n   * @return {NPSAPIQuery} The query object\n   */\n  build() {\n    if (this.parkCodes.length > 0) {\n      this.params[\"parkCode\"] = this.arrayToCommaDelimitedString(this.parkCodes);\n    }\n\n    if (this.stateCodes.length > 0) {\n      this.params[\"stateCode\"] = this.arrayToCommaDelimitedString(this.stateCodes);\n    }\n\n    if (this.fields.length > 0) {\n      this.params[\"fields\"] = this.arrayToCommaDelimitedString(this.fields);\n    }\n\n    this.params[\"limit\"] = this.limit;\n    this.params[\"start\"] = this.start;\n\n    if (this.queryString) {\n      this.params[\"q\"] = this.queryString;\n    }\n\n    return new NPSAPIQuery(this.resource, this.params, this.options);\n  }\n\n  private arrayToCommaDelimitedString = (items) => {\n    let out = \"\";\n    for (let i = 0; i < items.length; i++) {\n        if (i < items.length - 1) {\n          out += items[i] + \",\";\n        } else {\n          out += items[i];\n        }\n      }\n    return out;\n  };\n\n  includeField(field) {\n    this.fields.push(field);\n    return this;\n  }\n}\n","\nexport default interface INPSAPIResponse {\n  totalPages() : number;\n  currentPage() : number;\n  pagesLeft() : number;\n  ok() : boolean;\n  getData() : Array<object>;\n  getResource() : string;\n}\n\n/**\n * Model of a response received from the NPS API.\n */\nexport class NPSAPIResponse implements INPSAPIResponse {\n  protected readonly status : string;\n  protected readonly resource : string;\n  protected readonly start : number;\n  protected readonly limit : number;\n  protected readonly total : number;\n  protected readonly data : Array<object>;\n\n  /**\n   * @param status The status of the response\n   * @param resource The resource from which the response was retrieved\n   * @param start The start index of the response\n   * @param limit The limit of the response\n   * @param total The total number of elements in the resource\n   * @param data The data of the response\n   */\n  constructor(status, resource, start, limit, total, data) {\n    this.status = status;\n    this.resource = resource;\n    this.start = start;\n    this.limit = limit;\n    this.total = total;\n    this.data = data;\n  }\n\n  /**\n   * Gets the total number of pages at the resource accessed.\n   * @return {number}\n   */\n  totalPages() {\n    return Math.ceil(this.total / this.limit);\n  }\n\n  /**\n   * Gets the current page based on the query parameters\n   * @return {number}\n   */\n  currentPage() {\n    return this.start / this.limit;\n  }\n\n  /**\n   * Gets the number of pages left based on the query parameters\n   * @return {number}\n   */\n  pagesLeft() {\n    return this.totalPages() - this.currentPage();\n  }\n\n  /**\n   * Checks whether the response has an OK status.\n   * @return {boolean}\n   */\n  ok() {\n    return this.status === 'ok';\n  }\n\n  /**\n   * <p>\n   *     Gets the data of this response. This method should only be expected to return a defined value if this.ok()\n   *     is true.\n   * </p>\n   * @return {Object} The data of this response\n   */\n  getData() : Array<object> {\n    return this.data;\n  }\n\n  /**\n   * Gets the resource that was accessed.\n   * @return {String}\n   */\n  getResource() {\n    return this.resource;\n  }\n\n\n  /**\n   * Constructs an {@link NPSAPIResponse} object from raw data.\n   * @param raw A response object as received from an {@link NPSAPIWorkerManager}.\n   * @return {NPSAPIResponse} The new object\n   * @throws Error if parsing the data failed\n   */\n  static from(responseObj) {\n    if (responseObj.status === undefined) {\n      throw new Error(\"Cannot parse malformed response. Expected a 'status' property.\");\n    }\n\n    // Switch to address special cases (because the 'events' resource schema is apparently documented incorrectly...)\n    // TODO: Open an issue about this if they have the API code hosted on GitHub\n    switch (responseObj.reqResource) {\n      case 'events':\n        return new NPSAPIEventResponse(responseObj.status,\n          responseObj.reqResource,\n          responseObj.data.pagenumber,\n          responseObj.data.pagesize,\n          responseObj.data.total,\n          responseObj.data.data);\n      default:\n        return new NPSAPIResponse(responseObj.status,\n          responseObj.reqResource,\n          responseObj.data.start,\n          responseObj.data.limit,\n          responseObj.data.total,\n          responseObj.data.data);\n    }\n  }\n}\n\nclass NPSAPIEventResponse extends NPSAPIResponse {\n  constructor(status, resource, pagenumber, pagesize, total, data) {\n    super(status, resource, pagenumber, pagesize, total, data);\n  }\n\n  // Override this one method\n  currentPage() {\n    return this.start;\n  }\n}\n","import { NPSAPIResponse } from './NPSAPIResponse';\nimport INPSAPIQuery from './NPSAPIQuery';\n\nexport default interface INPSAPIWorkerManager {\n  request(query : INPSAPIQuery, callback : any);\n}\n\n/**\n * <p>\n *     Creates and manages an NPS API client worker thread. This class handles message passing and receiving\n *     and accepts {@link NPSAPIQuery}s.\n * </p>\n */\nexport class NPSAPIWorkerManager implements INPSAPIWorkerManager {\n  worker : any;\n  requestCounter : number;\n  callbacks : Array<any>; // Array of callback functions\n\n  /**\n   * @param {String} clientWorkerScriptSrc The worker script to use\n   */\n  constructor(clientWorkerScriptSrc, windowRef) {\n    // Setup worker if possible\n    if (!windowRef.Worker) {\n      throw new Error(\n        \"Cannot start background API service on worker thread. \" +\n        \"Make sure worker threads are supported on your browser.\");\n    }\n\n    this.requestCounter = 0;\n    this.worker = new Worker(clientWorkerScriptSrc);\n    this.callbacks = [];\n\n    // For internal use\n\n    // register event handler for this instance's worker\n    /*\n     * Form of response:\n     * {\n     *  status: <String>\n     *  id: <Int>\n     *  responseData: <JSON>\n     * }\n     */\n    this.worker.onmessage = (function (context) { // close over this instance\n      return (function (msg) {\n        let data = msg.data;\n        context.resolve(data);\n      });\n    })(this);\n  }\n\n  /**\n   * Queues a request.\n   * @param {NPSAPIQuery} query The query object.\n   * @param {function(NPSAPIResponse): void ?} callback An optional callback function\n   */\n  request(query, callback) {\n    this.worker.postMessage({\n      action: \"get\",\n      id: this.requestCounter,\n      data: query.strip()\n    });\n    if (callback) {\n      this.callbacks[this.requestCounter] = callback;\n    }\n    this.requestCounter++;\n  }\n\n  /**\n   * For internal use. Resolves the given response object.\n   * @param response The response object\n   */\n  private resolve(response) {\n    let idx = parseInt(response.id);\n    if (this.callbacks[idx]) {\n      this.callbacks[parseInt(response.id)](NPSAPIResponse.from(response));\n    } else {\n      // error?\n    }\n  }\n}\n","import INPSAPIQuery from \"./NPSAPIQuery\";\nimport {INPSModelDAO} from \"./NPSModelDAO\";\nimport NPSDataSource from \"./NPSDataSource\";\nimport NPSAPIQueryBuilder from \"./NPSAPIQueryBuilder\";\n\nexport interface INPSDataAccessStrategy {\n  getData(query: INPSAPIQuery, dao: INPSModelDAO): NPSDataSource;\n}\n\nexport class NPSDataAccessStrategyBuilder {\n  private strategy: INPSDataAccessStrategy;\n\n  constructor() {\n    this.strategy = new DefaultNPSDataAccessStrategy();\n  }\n\n  use(identifier: string, config: object = {}): NPSDataAccessStrategyBuilder {\n    switch (identifier) {\n      case \"default\":\n        this.strategy = new DefaultNPSDataAccessStrategy();\n        break;\n      case \"batch\":\n        this.strategy = new BatchNPSDataAccessStrategy(config);\n        break;\n      case \"filter\":\n        this.strategy = new FilteredNPSDataAccessStrategy(config, this.strategy);\n        break;\n      default:\n        throw new Error(\"Unrecognized strategy identifier\");\n    }\n    return this;\n  }\n\n  build(): INPSDataAccessStrategy {\n    return this.strategy;\n  }\n}\n\nabstract class ANPSDataAccessStrategy implements INPSDataAccessStrategy {\n  protected readonly config: object;\n\n  protected constructor(config: object) {\n    this.config = config;\n  }\n\n  abstract getData(query: INPSAPIQuery, dao: INPSModelDAO): NPSDataSource;\n}\n\nclass FilteredNPSDataAccessStrategy extends ANPSDataAccessStrategy {\n  delegate: INPSDataAccessStrategy;\n  predicate: any;\n\n  constructor(config: object, delegate: INPSDataAccessStrategy) {\n    super(config);\n    if ('predicate' in config) {\n      this.predicate = config['predicate'];\n    }\n\n    this.delegate = delegate;\n  }\n\n  getData(query: INPSAPIQuery, dao: INPSModelDAO): NPSDataSource {\n    const dataSource = this.delegate.getData(query, dao);\n    const outDataSource = new NPSDataSource();\n\n    dataSource.addOnUpdateHandler(snapshot => {\n      snapshot.forEach(item => {\n        if (this.predicate(item)) {\n          outDataSource.add(item);\n        }\n      });\n      outDataSource.complete();\n    });\n\n    return outDataSource;\n  }\n}\n\nclass DefaultNPSDataAccessStrategy extends ANPSDataAccessStrategy {\n  constructor() {\n    super({});\n  }\n\n  getData(query: INPSAPIQuery, dao: INPSModelDAO): NPSDataSource {\n    const dataSource = new NPSDataSource();\n    dao.retrieve(query)\n      .then((results) => {\n        dataSource.addAll(results);\n        dataSource.complete();\n      });\n    return dataSource;\n  }\n}\n\nclass BatchNPSDataAccessStrategy extends ANPSDataAccessStrategy {\n  private batches = 10;\n  private batchSize: number = 5;\n  private builder: NPSAPIQueryBuilder;\n\n  constructor(config: object) {\n    super(config);\n    if ('batchSize' in config) {\n      this.batchSize = config['batchSize'];\n    }\n    if ('batches' in config) {\n      this.batches = config['batches'];\n    }\n    if ('queryBuilder' in config) {\n      this.builder = config['queryBuilder'];\n    } else {\n      throw new Error(\"Batch strategy requires NPSAPIQueryBuilder instance to build paginated queries\");\n    }\n  }\n\n  getData(query: INPSAPIQuery, dao: INPSModelDAO): NPSDataSource {\n    const dataSource = new NPSDataSource();\n    (async (dataSource: NPSDataSource) => {\n      let fetchMore = true;\n\n      for (let i = 0; i < this.batches && fetchMore; i++) {\n        let results = await dao.retrieve(this.builder.build(), {'limit': this.batchSize});\n        if (results.length === 0) {\n          fetchMore = false;\n          break;\n        }\n\n        if (fetchMore) {\n          dataSource.addAll(results);\n        }\n\n        this.builder.nextPage();\n      }\n\n      dataSource.complete();\n    })(dataSource);\n    return dataSource;\n  }\n}\n","/**\n * A data source object which can be dynamically written to and read from.\n */\nexport default class NPSDataSource implements Iterable<any> {\n  private data: Array<any>;\n  private counter: number;\n  private onUpdateCallbacks: Array<any>;\n  private onCompletedCallbacks: Array<any>;\n\n  constructor() {\n    this.data = [];\n    this.counter = 0;\n    this.onUpdateCallbacks = [];\n    this.onCompletedCallbacks = [];\n  }\n\n  [Symbol.iterator](): Iterator<any> {\n    return this.getSnapshot()[Symbol.iterator]();\n  }\n\n  addOnCompletedHandler(fn) {\n    this.onCompletedCallbacks.push(fn);\n  }\n\n  complete() {\n    this.onCompletedCallbacks.forEach(fn => fn(this.getSnapshotRaw()));\n  }\n\n  /**\n   * Adds a callback to the event which is fired every time this instance's data is changed.\n   * @param {function(Array<{id:int, data: *}>): void} fn Callback function\n   */\n  addOnUpdateHandler(fn) {\n    this.onUpdateCallbacks.push(fn);\n  }\n\n  /**\n   * Fires the \"on update\" event.\n   */\n  private fireOnUpdateEvent() {\n    this.onUpdateCallbacks.forEach(fn => fn(this.getSnapshotRaw()));\n  }\n\n  /**\n   * Wraps a datum with an ID value assigned by this data source.\n   * @param item The item to wrap\n   * @return {{data: *, id: number}} The wrapped datum\n   */\n  wrap(item) {\n    let wrapped = {\n      id: this.counter,\n      data: item\n    };\n\n    this.counter += 1;\n    return wrapped;\n  }\n\n  /**\n   * Unwraps a datum, returning the original contents. This is the inverse of <code>wrap()</code>.\n   * @param item The datum to unwrap\n   * @return {*} The original item\n   */\n  unwrap(item) {\n    let unwrapped = item.data;\n    return unwrapped;\n  }\n\n  /**\n   * Adds an item to this data source.\n   * @param item The item to add\n   */\n  add(item) {\n    this.data.push(this.wrap(item));\n    this.fireOnUpdateEvent();\n  }\n\n  /**\n   * Adds all items in the given array to this data source.\n   * @param {Array} itemsArr The array of items\n   */\n  addAll(itemsArr) {\n    if (itemsArr && itemsArr.length > 0) {\n      this.data = this.data.concat(itemsArr.map(item => this.wrap(item)));\n      this.fireOnUpdateEvent();\n    }\n  }\n\n  /**\n   * <p>\n   *     Inserts the given item at the given index in this data source. This is useful to control the order in which\n   *     items are displayed.\n   * </p>\n   * @param {int} index The index at which to insert\n   * @param item The item to insert\n   */\n  insert(index, item) {\n    this.data.splice(index, 0, this.wrap(item));\n    this.fireOnUpdateEvent();\n  }\n\n  /**\n   * Removes the item at the given index.\n   * @param {int} index The index at which to remove\n   */\n  removeAt(index) {\n\n  }\n\n  /**\n   * <p>\n   *     Updates the item at the given index with the given item. This operation is a compound operation of a\n   *     removal and an insertion.\n   * </p>\n   * @param index The index at which to update\n   * @param newItem The new item to replace the old one\n   */\n  update(index, newItem) {\n    this.removeAt(index);\n    this.insert(index, newItem);\n    this.fireOnUpdateEvent();\n  }\n\n  /**\n   * Completely overwrites the data in this data source with data from the given array.\n   * @param {Array} itemsArr The array to set as the new data\n   */\n  set(itemsArr) {\n    this.data = itemsArr.map(item => this.wrap(item));\n    this.fireOnUpdateEvent();\n  }\n\n  /**\n   * <p>\n   *     Gets a snapshot of the data in this data source. This is the principal way of reading the data.\n   *     This method returns a shallow copy of the data, which is useful for saving previous states.\n   * </p>\n   * @return {Array} The snapshot of the data\n   */\n  getSnapshot(): Array<any> {\n    return this.data.slice(0);\n  }\n\n  /**\n   * <p>\n   *     Gets a raw snapshot, where every datum has been unwrapped. Refer to the {@link wrap}() and {@link unwrap}()\n   *     methods for more information on wrapping.\n   * </p>\n   * @return {Array} The raw snapshot of the data\n   */\n  getSnapshotRaw() {\n    return this.getSnapshot().map(item => this.unwrap(item));\n  }\n\n  /**\n   * <p>\n   *     Returns a list of operations that, when applied to the given previous snapshot, will result in this\n   *     instance's current state.\n   * </p>\n   * @param {Array} previousSnapshot The previous snapshot to compare against.\n   * @return {Array} An array of discrete operations that represent all of the changes made\n   */\n  getDelta(previousSnapshot) {\n    let ops = [];\n\n    // Two ids can never swap places, because of how the counter is incremented after every addition or\n    // insertion, which greatly simplifies computing deltas.\n    let thisSnapshot = this.getSnapshot();\n\n    let previousIds = previousSnapshot.map(item => item.id);\n    // @ts-ignore\n    let thisIds = thisSnapshot.map(item => item.id);\n\n    previousIds.forEach((id, index) => {\n      if (!thisIds.includes(id)) {\n        ops.push({op: \"remove\", id: id});\n      }\n    });\n\n    thisIds.forEach((id, index) => {\n      if (!previousIds.includes(id)) {\n        ops.push({ op: \"insertAt\",\n          index: index,\n          data: this.unwrap(thisSnapshot[index])\n        }); // -1 encodes insert at the beginning\n      }\n    });\n\n    return ops;\n  }\n\n  isEmpty() {\n    return this.data.length === 0;\n  }\n}\n","/**\n * Definitions for JavaScript class representations of data objects provided by the NPS API.\n */\nimport {NPSAPIQueryOptions} from \"./NPSAPIQuery\";\nimport {INPSResourceDescription, NPSResourceDescriptionBuilder} from \"./NPSResourceDescription\";\n\nexport class NPSObjectBuilder {\n  private data: object;\n  private resource: string;\n  private config: NPSAPIQueryOptions;\n\n  constructor() {\n    this.config = new NPSAPIQueryOptions();\n  }\n\n  useResource(resource: string): NPSObjectBuilder {\n    this.resource = resource;\n    return this;\n  }\n\n  useData(data): NPSObjectBuilder {\n    this.data = data;\n    return this;\n  }\n\n  withQueryConfig(config: NPSAPIQueryOptions) {\n    this.config = config;\n    return this;\n  }\n\n  build() : INPSObject {\n    return ANPSObject.from(this.resource, this.data, this.config);\n  }\n}\n\nexport interface INPSObject {\n  applyPredicate(pred: (obj: object) => boolean): boolean;\n  getResourceDescription(): INPSResourceDescription;\n\n  // These getters are commonly used properties for easy access\n  getTitle(): string;\n  getDescription(): string;\n  getUrl(): string;\n\n  getDisplayElements(): Array<INPSDisplayElement>;\n\n  /**\n   * Gets a unique string associated with this object\n   */\n  getUniqueId(): string;\n}\n\nexport enum NPSDisplayElementType {\n  SUMMARY,\n  PROPERTY,\n  META,\n  IMAGE\n}\n\nexport interface INPSDisplayElement extends INPSObject {\n  getDisplayElementType(): NPSDisplayElementType;\n}\n\n/**\n * Abstract base class for models of data objects from the NPS API.\n */\nabstract class ANPSObject implements INPSDisplayElement {\n  private readonly title: string;\n  private readonly description: string;\n  private readonly url: string;\n  protected readonly sourceData: object;\n  protected readonly config: NPSAPIQueryOptions;\n  protected readonly resourceName: string;\n\n  /**\n   * @param title\n   * @param description\n   * @param url\n   */\n  protected constructor(title: string, description: string, url: string, resourceName: string, sourceData: object, config: NPSAPIQueryOptions) {\n    this.title = title;\n    this.description = description;\n    this.url = url;\n    this.resourceName = resourceName;\n    this.sourceData = sourceData;\n    this.config = config;\n  }\n\n  getDescription(): string {\n    return this.description;\n  }\n\n  getTitle(): string {\n    return this.title;\n  }\n\n  getUrl(): string {\n    return this.url;\n  }\n\n  abstract getDisplayElements(): Array<INPSDisplayElement>;\n  abstract getDisplayElementType(): NPSDisplayElementType;\n  abstract getUniqueId(): string;\n\n  getResourceDescription(): INPSResourceDescription {\n    if (this.resourceName) {\n      return NPSResourceDescriptionBuilder.get(this.resourceName);\n    } else {\n      throw new Error(\"Object does not have an associated resource\");\n    }\n  }\n\n  applyPredicate(pred: (obj: object) => boolean): boolean {\n    if (this.sourceData) {\n      return pred(this.sourceData);\n    } else {\n      return false;\n    }\n  }\n\n  static from(resource: string, data: object, config: NPSAPIQueryOptions): INPSObject {\n    switch (resource) {\n      case 'parks':\n        return new NPSPark(data, config);\n      case 'alerts':\n        return new NPSAlert(data, config);\n      case 'newsreleases':\n        return new NPSNewsRelease(data, config);\n      case 'events':\n        return new NPSEvent(data, config);\n      default:\n        throw new Error('Unsupported resource');\n    }\n  }\n}\n\n/**\n * Data model of an alert issued by the NPS.\n */\nclass NPSAlert extends ANPSObject {\n  private readonly parkCode: string;\n  /**\n   * @param {JSON} source Source JSON object from the API to use to construct the object\n   */\n  constructor(source, config: NPSAPIQueryOptions) {\n    super(source.title, source.description, source.url, 'alerts', source, config);\n    this.parkCode = source.parkCode;\n  }\n\n  getUniqueId(): string {\n    return this.parkCode;\n  }\n\n  getDisplayElementType(): NPSDisplayElementType {\n    return NPSDisplayElementType.META;\n  }\n\n  getDisplayElements(): Array<INPSDisplayElement> {\n    return [];\n  }\n}\n\n/**\n * Data model of a park in the NPS's database.\n */\nclass NPSPark extends ANPSObject {\n  private readonly images: Array<INPSDisplayElement>;\n  private readonly displayElements: Array<INPSDisplayElement>;\n  private readonly parkCode: string;\n\n  /**\n   * @param source Source JSON object from the API to use to construct the object\n   */\n  constructor(source, config: NPSAPIQueryOptions) {\n    super(source.fullName, source.description, source.url, 'parks', source, config);\n    this.images = [];\n    this.displayElements = [];\n    this.parkCode = source.parkCode;\n\n    if ('images' in source) {\n      source['images'].forEach(imgData => {\n        this.images.push(new NPSImage(imgData, this.config));\n      })\n    }\n\n    this.displayElements.push(new NPSDisplayParagraph(\"Park Summary\", this.getDescription(), this.getUrl()));\n\n    // if the config has the long text flag set, then we add paragraph elements\n    if (this.config.getLong()) {\n      if ('weatherInfo' in source) {\n        this.displayElements.push(new NPSDisplayParagraph(\"Weather Info\",\n          source['weatherInfo'],\n          undefined));\n      }\n      if ('directionsInfo' in source) {\n        this.displayElements.push(new NPSDisplayParagraph(\"Directions\",\n          source['directionsInfo'],\n          source['directionsUrl']));\n      }\n    }\n\n    // Next, add all images to the display elements list\n    this.images.forEach(img => this.displayElements.push(img));\n  }\n\n  getUniqueId(): string {\n    return this.parkCode;\n  }\n\n  getDisplayElementType(): NPSDisplayElementType {\n    return NPSDisplayElementType.SUMMARY;\n  }\n\n  getDisplayElements(): Array<INPSDisplayElement> {\n    return this.displayElements;\n  }\n}\n\n/**\n *\n */\nclass NPSNewsRelease extends ANPSObject {\n  constructor(source, config: NPSAPIQueryOptions) {\n    super(source.title, source.abstract, source.url, 'newsreleases', source, config);\n  }\n\n  getUniqueId(): string {\n    throw new Error(\"Not implemented\");\n  }\n\n  getDisplayElementType(): NPSDisplayElementType {\n    return NPSDisplayElementType.SUMMARY;\n  }\n\n  getDisplayElements(): Array<INPSDisplayElement> {\n    return [];\n  }\n}\n\nclass NPSImage extends ANPSObject {\n  private readonly id: string;\n\n  constructor(source, config: NPSAPIQueryOptions) {\n    super(source.title + \" (Credit: \" + source.credit + \")\", source.caption, source.url, undefined, source, config);\n    this.id = source.id;\n  }\n\n  getUniqueId(): string {\n    return this.id;\n  }\n\n  getDisplayElementType(): NPSDisplayElementType {\n    return NPSDisplayElementType.IMAGE;\n  }\n\n  getDisplayElements(): Array<INPSDisplayElement> {\n    return [];\n  }\n}\n\nclass NPSDisplayParagraph extends ANPSObject {\n  constructor(title: string, description: string, url: string) {\n    super(title, description, url, undefined, undefined, new NPSAPIQueryOptions);\n  }\n\n  getUniqueId(): string {\n    throw new Error(\"Unsupported Operation: getUniqueId on NPSDisplayParagraph\");\n  }\n\n  getDisplayElementType(): NPSDisplayElementType {\n    return NPSDisplayElementType.SUMMARY;\n  }\n\n  getDisplayElements(): Array<INPSDisplayElement> {\n    return [];\n  }\n}\n\nclass NPSDisplayProperty extends ANPSObject {\n  constructor(title: string, description: string) {\n    super(title, description, undefined, undefined, undefined, new NPSAPIQueryOptions);\n  }\n\n  getUniqueId(): string {\n    throw new Error(\"Unsupported Operation: getUniqueId on NPSDisplayParagraph\");\n  }\n\n  getDisplayElementType(): NPSDisplayElementType {\n    return NPSDisplayElementType.PROPERTY;\n  }\n\n  getDisplayElements(): Array<INPSDisplayElement> {\n    return [];\n  }\n}\n\nclass NPSEvent extends ANPSObject {\n  private readonly id: string;\n  private displayElements: Array<INPSDisplayElement>;\n\n  constructor(source, config: NPSAPIQueryOptions) {\n    super(source.title, source.description, source.url, 'events', source, config);\n    this.id = source.id;\n    this.displayElements = [];\n\n    if (this.config.getLong()) {\n      let isfree: boolean = this.sourceData['isfree'];\n\n      if (isfree) {\n        this.displayElements.push(new NPSDisplayProperty('Free?', isfree ? 'Yes' : 'No'));\n      } else {\n        this.displayElements.push(new NPSDisplayProperty('Fee Info:', this.sourceData['feeinfo']));\n      }\n\n      if (this.sourceData['contacttelephonenumber'] !== '') {\n        this.displayElements.push(new NPSDisplayProperty('Contact:', this.sourceData['contacttelephonenumber']));\n      }\n\n      if (this.sourceData['regresinfo'] !== '') {\n        this.displayElements.push(new NPSDisplayProperty('Registration Info:', this.sourceData['regresinfo']));\n      }\n\n      this.displayElements.push(new NPSDisplayParagraph('Event Summary',\n        this.getDescription(), this.getUrl()));\n      console.log(this.sourceData);\n      if ('images' in this.sourceData) {\n        this.sourceData['images'].forEach(imgData => {\n          this.displayElements.push(new NPSImage(imgData, this.config));\n        });\n      }\n    }\n  }\n\n  getDisplayElementType(): NPSDisplayElementType {\n    return NPSDisplayElementType.SUMMARY;\n  }\n\n  getDisplayElements(): Array<INPSDisplayElement> {\n    return this.displayElements;\n  }\n\n  getUniqueId(): string {\n    return this.id;\n  }\n}\n\n\n// TODO: Write model classes for the rest of the resources\n\n\n","import INPSAPIQuery from \"./NPSAPIQuery\";\nimport INPSAPIWorkerManager from \"./NPSAPIWorkerManager\";\nimport INPSAPIResponse from \"./NPSAPIResponse\";\nimport {INPSObject, NPSObjectBuilder} from \"./NPSModel\";\n\nexport interface INPSModelDAO {\n  retrieve(query: INPSAPIQuery, callback?: any): Promise<Array<INPSObject>>;\n}\n\n/**\n * Data Access Object implementation for the NPS API.\n */\nexport class NPSModelDAO implements INPSModelDAO {\n  private readonly workerMgr: INPSAPIWorkerManager;\n\n  constructor(workerMgr) {\n    this.workerMgr = workerMgr;\n  }\n\n  /**\n   * Asynchronously fetch {@link ANPSObject} objects using the given {@link NPSAPIQuery} object.\n   * @param {NPSAPIQuery} query The query to execute\n   * @param paramsOverride\n   * @param {function(boolean, Array<ANPSObject>): void ?} callback Optional callback that is called when the data\n   *                                                     is obtained. The first parameter is a boolean value that is\n   *                                                     true if and only if the operation succeeded.\n   * @return {Array<ANPSObject>} Array of model objects retrieved. It is empty if there are no results\n   * @throws Error if the response could not be parsed\n   */\n  public async retrieve(query: INPSAPIQuery, paramsOverride: object = {}, callback?: any)\n    : Promise<Array<INPSObject>> {\n    let response: INPSAPIResponse = await query.execute(this.workerMgr, paramsOverride);\n\n    if (!response.ok()) {\n      if (callback) {\n        callback(response.ok(), null);\n      }\n\n      // @ts-ignore\n      //throw new Error(response.getData());\n      return [];\n    }\n\n    let resource = response.getResource();\n    let data = response.getData(); // This data is the actual API response in its entirety\n\n    let out = [];\n\n    if (response.totalPages() == 0) {\n      return [];\n    }\n\n    let objBuilder = new NPSObjectBuilder();\n    if (response.pagesLeft() > 0) {\n      data.forEach((obj) => {\n        out.push(\n          objBuilder.useResource(resource)\n            .useData(obj)\n            .withQueryConfig(query.getConfig())\n            .build()\n        );\n      });\n    }\n\n    if (callback) {\n      callback(response.ok(), out);\n    }\n\n    return out;\n  }\n}\n","\nexport interface INPSResourceDescription {\n  getDesignations(): Array<string>;\n}\n\nexport class NPSResourceDescriptionBuilder {\n  static get(resourceName: string) {\n    switch (resourceName) {\n      case 'parks':\n        return new NPSResourceDescription(\n          ['National Park', 'National Monument', 'Recreation Area']\n        );\n      case 'alerts':\n        return new NPSResourceDescription(\n          [ 'Danger', 'Caution', 'Information', 'Park Closure' ]\n        );\n      case 'events':\n        return new NPSResourceDescription(\n          []\n        );\n    }\n  }\n}\n\nclass NPSResourceDescription implements INPSResourceDescription {\n  private readonly designations: Array<string>;\n\n  constructor(designations: Array<string>) {\n    this.designations = designations;\n  }\n\n  getDesignations(): Array<string> {\n    return this.designations;\n  }\n}\n"],"sourceRoot":""}